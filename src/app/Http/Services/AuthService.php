<?php

namespace App\Http\Services;

use App\Exceptions\LoginFailException;
use App\Http\Dto\LoginUserDTO;
use App\Http\Dto\RegisterUserDTO;
use Illuminate\Support\Facades\Hash;

class AuthService
{
    private UserService $userService;

    public function __construct(UserService $userService)
    {
        $this->userService = $userService;
    }

    /**
     * The function registers a new user by checking for duplicate email and creating a new user in the
     * repository.
     * 
     * @param RegisterUserDTO registerUserDTO It is an object of the class RegisterUserDTO, which contains
     * the user's email, password, and name. It is used to pass the user's information to the register
     * function.
     */
    public function register(RegisterUserDTO $registerUserDTO): void
    {
        // Check if the email is already registered
        $this->userService->checkDuplicateEmailInDatabase($registerUserDTO->getEmail());

        // Create a new user
        $this->userService->createNewUser($registerUserDTO);
    }

    /**
     * This PHP function logs in a user by checking their email and password, and returns a token for
     * authentication.
     * 
     * @param LoginUserDTO loginUserDTO `LoginUserDTO` is a Data Transfer Object (DTO) that contains the
     * email and password of a user trying to log in. It is used as a parameter for the `login` function to
     * authenticate the user's credentials.
     * 
     * @return ?string a string which is the plain text token generated by the `createToken` method of the
     * `` object. This token is used for authentication purposes.
     */
    public function login(LoginUserDTO $loginUserDTO): string
    {
        $user = $this->userService->getUserForLogin($loginUserDTO);

        if (!Hash::check($loginUserDTO->getPassword(), $user->password)) {
            throw new LoginFailException();
        }

        return $user->createToken('auth_token')->plainTextToken;
    }
}